// Code generated by goa v3.11.3, DO NOT EDIT.
//
// sop gRPC server
//
// Command:
// $ goa gen stocktrader/design

package server

import (
	"context"
	soppb "stocktrader/gen/grpc/sop/pb"
	sop "stocktrader/gen/sop"

	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
)

// Server implements the soppb.SopServer interface.
type Server struct {
	PlanH goagrpc.UnaryHandler
	soppb.UnimplementedSopServer
}

// New instantiates the server struct with the sop service endpoints.
func New(e *sop.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		PlanH: NewPlanHandler(e.Plan, uh),
	}
}

// NewPlanHandler creates a gRPC handler which serves the "sop" service "plan"
// endpoint.
func NewPlanHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodePlanRequest, EncodePlanResponse)
	}
	return h
}

// Plan implements the "Plan" method in soppb.SopServer interface.
func (s *Server) Plan(ctx context.Context, message *soppb.PlanRequest) (*soppb.PlanResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "plan")
	ctx = context.WithValue(ctx, goa.ServiceKey, "sop")
	resp, err := s.PlanH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*soppb.PlanResponse), nil
}
