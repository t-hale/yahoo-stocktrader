// Code generated by goa v3.11.3, DO NOT EDIT.
//
// sop gRPC client encoders and decoders
//
// Command:
// $ goa gen stocktrader/design

package client

import (
	"context"
	soppb "stocktrader/gen/grpc/sop/pb"
	sop "stocktrader/gen/sop"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildPlanFunc builds the remote method to invoke for "sop" service "plan"
// endpoint.
func BuildPlanFunc(grpccli soppb.SopClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Plan(ctx, reqpb.(*soppb.PlanRequest), opts...)
		}
		return grpccli.Plan(ctx, &soppb.PlanRequest{}, opts...)
	}
}

// EncodePlanRequest encodes requests sent to sop plan endpoint.
func EncodePlanRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*sop.PlanPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sop", "plan", "*sop.PlanPayload", v)
	}
	return NewProtoPlanRequest(payload), nil
}

// DecodePlanResponse decodes responses from the sop plan endpoint.
func DecodePlanResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	message, ok := v.(*soppb.PlanResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sop", "plan", "*soppb.PlanResponse", v)
	}
	res := NewPlanResult(message)
	return res, nil
}
